package com.example.MyBookShopApp.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import javax.persistence.*;
import java.sql.Date;
import java.util.*;
import java.util.stream.Collectors;

@Entity
@Table(name = "books")
@ApiModel(description = "entity representing a book")
public class Book {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @ApiModelProperty("id generated by db automaticaly")
    private Integer id;

    @Column(name = "pub_date")
    @ApiModelProperty("date of book publication")
    private Date pubDate;

    @Column(name = "is_bestseller")
    @ApiModelProperty("if isBestseller = 1 so the book is considered to be bestseller and  if 0 the book is not a " +
            "bestseller")
    private Integer isBestseller;

    @ApiModelProperty("mnemonical identity sequence of characters")
    private String slug;
    @ApiModelProperty("book title")
    private String title;
    @ApiModelProperty("image url")
    private String image;

    @Column(columnDefinition = "TEXT")
    @ApiModelProperty("book description text")
    private String description;

    @Column(name = "price")
    @JsonProperty("price")
    @ApiModelProperty("book price without discount")
    private Integer priceOld;

    @Column(name = "discount")
    @JsonProperty("discount")
    @ApiModelProperty("discount value for book")
    private Double price;

    @Column(name = "bought_by_users")
    private Integer boughtByUsers;

    @Column(name = "added_to_cart_by_users")
    private Integer addedToCartByUsers;

    @Column(name = "delayed_by_users")
    private Integer delayedByUsers;

    @ManyToMany(mappedBy = "bookList")
    @JsonIgnore
    private List<Tag> tagList;

    @ManyToMany
    @JoinTable(name = "book2genre",
    joinColumns = @JoinColumn(name = "book_id"),
    inverseJoinColumns = @JoinColumn(name = "genre_id"))
    @JsonIgnore
    private List<Genre> genreList;

    @ManyToMany(mappedBy = "bookList")
    @JsonIgnore
    List<Author> authorList;

    @ManyToMany
    @JoinTable(name = "book_rating",
    joinColumns = @JoinColumn(name = "book_id"),
    inverseJoinColumns = @JoinColumn(name = "user_id"))
    @JsonIgnore
    private List<User> listAppraisers;

    @OneToMany(mappedBy = "book")
    private List<BookFile> bookFileList = new ArrayList<>();

    @OneToMany(mappedBy = "book")
    private Set<BookReview> bookReviewSet;

    public Set<BookReview> getBookReviewSet() {
        return bookReviewSet.stream()
                .sorted(Comparator.comparing(BookReview::getRating).reversed())
                .collect(Collectors.toCollection(LinkedHashSet::new));
    }

    public void setBookReviewSet(Set<BookReview> bookReviewSet) {
        this.bookReviewSet = bookReviewSet;
    }

    public List<BookFile> getBookFileList() {
        return bookFileList;
    }

    public void setBookFileList(List<BookFile> bookFileList) {
        this.bookFileList = bookFileList;
    }

    public String getAuthors() {
        StringBuilder stringBuilder = new StringBuilder();
        for (Author author : authorList) {
            stringBuilder.append(stringBuilder.length() == 0 ? "" : ", ")
                    .append(author.getName());
        }

        return stringBuilder.toString();
    }

    @JsonProperty
    public Integer discountPrice() {
        return priceOld - Math.toIntExact(Math.round(price * priceOld));
    }

    public List<Genre> getGenreList() {
        return genreList;
    }

    public List<Tag> getTagList() {
        return tagList;
    }

    public Integer getBoughtByUsers() {
        return boughtByUsers;
    }

    public void setBoughtByUsers(Integer usersBought) {
        this.boughtByUsers = usersBought;
    }

    public Integer getAddedToCartByUsers() {
        return addedToCartByUsers;
    }

    public void setAddedToCartByUsers(Integer addedToCartByUsers) {
        this.addedToCartByUsers = addedToCartByUsers;
    }

    public Integer getDelayedByUsers() {
        return delayedByUsers;
    }

    public void setDelayedByUsers(Integer delayedByUsers) {
        this.delayedByUsers = delayedByUsers;
    }

    public Date getPubDate() {
        return pubDate;
    }

    public void setPubDate(Date pubDate) {
        this.pubDate = pubDate;
    }

    public Integer getIsBestseller() {
        return isBestseller;
    }

    public void setIsBestseller(Integer isBestseller) {
        this.isBestseller = isBestseller;
    }

    public String getSlug() {
        return slug;
    }

    public void setSlug(String slug) {
        this.slug = slug;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Integer getPriceOld() {
        return priceOld;
    }

    public void setPriceOld(Integer priceOld) {
        this.priceOld = priceOld;
    }

    public Double getPrice() {
        return price;
    }
    
    public void setPrice(Double price) {
        this.price = price;
    }

    @Override
    public String toString() {
        return "Book{" +
                "id=" + id +
                ", title='" + title + '\'' +
                '}';
    }
}
